{"name": "test_gongzuoliu[202310231169745-0]", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.SessionNotCreatedException: Message: session not created: This version of ChromeDriver only supports Chrome version 112\nCurrent browser version is 118.0.5993.89 with binary path C:\\Users\\wang_\\AppData\\Local\\Google\\Chrome\\Application\\chrome.exe\nStacktrace:\nBacktrace:\n\tGetHandleVerifier [0x0093DCE3+50899]\n\t(No symbol) [0x008CE111]\n\t(No symbol) [0x007D5588]\n\t(No symbol) [0x007F570C]\n\t(No symbol) [0x007F1471]\n\t(No symbol) [0x007EF479]\n\t(No symbol) [0x00821FFE]\n\t(No symbol) [0x00821CEC]\n\t(No symbol) [0x0081B6F6]\n\t(No symbol) [0x007F7708]\n\t(No symbol) [0x007F886D]\n\tGetHandleVerifier [0x00BA3EAE+2566302]\n\tGetHandleVerifier [0x00BD92B1+2784417]\n\tGetHandleVerifier [0x00BD327C+2759788]\n\tGetHandleVerifier [0x009D5740+672048]\n\t(No symbol) [0x008D8872]\n\t(No symbol) [0x008D41C8]\n\t(No symbol) [0x008D42AB]\n\t(No symbol) [0x008C71B7]\n\tBaseThreadInitThunk [0x750F7BA9+25]\n\tRtlInitializeExceptionChain [0x7714BD3B+107]\n\tRtlClearBits [0x7714BCBF+191]", "trace": "tiaoma = '202310231169745', ed_a = '0'\n\n    @pytest.mark.parametrize('tiaoma,ed_a', category_data)\n    def test_gongzuoliu(tiaoma,ed_a):\n>           driver=login()\n\ntestcase\\test_gongzuoliu.py:34: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nbusiness\\file_processing.py:23: in login\n    denglu_logger=Login()\npages\\login.py:8: in __init__\n    super().__init__()\npages\\base_selenium.py:9: in __init__\n    self.driver=webdriver.Chrome()\nC:\\Users\\wang_\\AppData\\Local\\Programs\\Python\\Python39\\lib\\site-packages\\selenium\\webdriver\\chrome\\webdriver.py:49: in __init__\n    super().__init__(\nC:\\Users\\wang_\\AppData\\Local\\Programs\\Python\\Python39\\lib\\site-packages\\selenium\\webdriver\\chromium\\webdriver.py:54: in __init__\n    super().__init__(\nC:\\Users\\wang_\\AppData\\Local\\Programs\\Python\\Python39\\lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:206: in __init__\n    self.start_session(capabilities)\nC:\\Users\\wang_\\AppData\\Local\\Programs\\Python\\Python39\\lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:291: in start_session\n    response = self.execute(Command.NEW_SESSION, caps)[\"value\"]\nC:\\Users\\wang_\\AppData\\Local\\Programs\\Python\\Python39\\lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:346: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x0000024CDEA6AD30>\nresponse = {'status': 500, 'value': '{\"value\":{\"error\":\"session not created\",\"message\":\"session not created: This version of Chro...dInitThunk [0x750F7BA9+25]\\\\n\\\\tRtlInitializeExceptionChain [0x7714BD3B+107]\\\\n\\\\tRtlClearBits [0x7714BCBF+191]\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        if status in ErrorCode.NO_SUCH_ELEMENT:\n            exception_class = NoSuchElementException\n        elif status in ErrorCode.NO_SUCH_FRAME:\n            exception_class = NoSuchFrameException\n        elif status in ErrorCode.NO_SUCH_SHADOW_ROOT:\n            exception_class = NoSuchShadowRootException\n        elif status in ErrorCode.NO_SUCH_WINDOW:\n            exception_class = NoSuchWindowException\n        elif status in ErrorCode.STALE_ELEMENT_REFERENCE:\n            exception_class = StaleElementReferenceException\n        elif status in ErrorCode.ELEMENT_NOT_VISIBLE:\n            exception_class = ElementNotVisibleException\n        elif status in ErrorCode.INVALID_ELEMENT_STATE:\n            exception_class = InvalidElementStateException\n        elif (\n            status in ErrorCode.INVALID_SELECTOR\n            or status in ErrorCode.INVALID_XPATH_SELECTOR\n            or status in ErrorCode.INVALID_XPATH_SELECTOR_RETURN_TYPER\n        ):\n            exception_class = InvalidSelectorException\n        elif status in ErrorCode.ELEMENT_IS_NOT_SELECTABLE:\n            exception_class = ElementNotSelectableException\n        elif status in ErrorCode.ELEMENT_NOT_INTERACTABLE:\n            exception_class = ElementNotInteractableException\n        elif status in ErrorCode.INVALID_COOKIE_DOMAIN:\n            exception_class = InvalidCookieDomainException\n        elif status in ErrorCode.UNABLE_TO_SET_COOKIE:\n            exception_class = UnableToSetCookieException\n        elif status in ErrorCode.TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.SCRIPT_TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.UNKNOWN_ERROR:\n            exception_class = WebDriverException\n        elif status in ErrorCode.UNEXPECTED_ALERT_OPEN:\n            exception_class = UnexpectedAlertPresentException\n        elif status in ErrorCode.NO_ALERT_OPEN:\n            exception_class = NoAlertPresentException\n        elif status in ErrorCode.IME_NOT_AVAILABLE:\n            exception_class = ImeNotAvailableException\n        elif status in ErrorCode.IME_ENGINE_ACTIVATION_FAILED:\n            exception_class = ImeActivationFailedException\n        elif status in ErrorCode.MOVE_TARGET_OUT_OF_BOUNDS:\n            exception_class = MoveTargetOutOfBoundsException\n        elif status in ErrorCode.JAVASCRIPT_ERROR:\n            exception_class = JavascriptException\n        elif status in ErrorCode.SESSION_NOT_CREATED:\n            exception_class = SessionNotCreatedException\n        elif status in ErrorCode.INVALID_ARGUMENT:\n            exception_class = InvalidArgumentException\n        elif status in ErrorCode.NO_SUCH_COOKIE:\n            exception_class = NoSuchCookieException\n        elif status in ErrorCode.UNABLE_TO_CAPTURE_SCREEN:\n            exception_class = ScreenshotException\n        elif status in ErrorCode.ELEMENT_CLICK_INTERCEPTED:\n            exception_class = ElementClickInterceptedException\n        elif status in ErrorCode.INSECURE_CERTIFICATE:\n            exception_class = InsecureCertificateException\n        elif status in ErrorCode.INVALID_COORDINATES:\n            exception_class = InvalidCoordinatesException\n        elif status in ErrorCode.INVALID_SESSION_ID:\n            exception_class = InvalidSessionIdException\n        elif status in ErrorCode.UNKNOWN_METHOD:\n            exception_class = UnknownMethodException\n        else:\n            exception_class = WebDriverException\n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.SessionNotCreatedException: Message: session not created: This version of ChromeDriver only supports Chrome version 112\nE       Current browser version is 118.0.5993.89 with binary path C:\\Users\\wang_\\AppData\\Local\\Google\\Chrome\\Application\\chrome.exe\nE       Stacktrace:\nE       Backtrace:\nE       \tGetHandleVerifier [0x0093DCE3+50899]\nE       \t(No symbol) [0x008CE111]\nE       \t(No symbol) [0x007D5588]\nE       \t(No symbol) [0x007F570C]\nE       \t(No symbol) [0x007F1471]\nE       \t(No symbol) [0x007EF479]\nE       \t(No symbol) [0x00821FFE]\nE       \t(No symbol) [0x00821CEC]\nE       \t(No symbol) [0x0081B6F6]\nE       \t(No symbol) [0x007F7708]\nE       \t(No symbol) [0x007F886D]\nE       \tGetHandleVerifier [0x00BA3EAE+2566302]\nE       \tGetHandleVerifier [0x00BD92B1+2784417]\nE       \tGetHandleVerifier [0x00BD327C+2759788]\nE       \tGetHandleVerifier [0x009D5740+672048]\nE       \t(No symbol) [0x008D8872]\nE       \t(No symbol) [0x008D41C8]\nE       \t(No symbol) [0x008D42AB]\nE       \t(No symbol) [0x008C71B7]\nE       \tBaseThreadInitThunk [0x750F7BA9+25]\nE       \tRtlInitializeExceptionChain [0x7714BD3B+107]\nE       \tRtlClearBits [0x7714BCBF+191]\n\nC:\\Users\\wang_\\AppData\\Local\\Programs\\Python\\Python39\\lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py:245: SessionNotCreatedException"}, "parameters": [{"name": "tiaoma", "value": "'202310231169745'"}, {"name": "ed_a", "value": "'0'"}], "start": 1698060214931, "stop": 1698060218446, "uuid": "98f6696f-6571-4470-8ef9-84bf8af94cd4", "historyId": "bb15fbaa4228382ea81ad92fccc26efa", "testCaseId": "c0076cde91c9a67cf92a259f0b3b2e97", "fullName": "testcase.test_gongzuoliu#test_gongzuoliu", "labels": [{"name": "parentSuite", "value": "testcase"}, {"name": "suite", "value": "test_gongzuoliu"}, {"name": "host", "value": "wangyun"}, {"name": "thread", "value": "3520-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "testcase.test_gongzuoliu"}]}